<form action='bit.php' method='post'>
	数字：<input type='text' name='num'>
	<input  type='submit' name='sub' value='sub'>
</form>
<?php
if(isset($_POST['sub']))
{
	//整数左移x位：数字乘以2的x次方
	//整数右移y位：数字除以2的y次方
	$a = $_POST['num'];
	echo "输入十进制:".$a."<br>" ;
	echo "转换二进制:".decbin($a)."<br>" ;
	echo "十进制左移2位:".($c=$a>>2)."<br>";
	echo "移位后二进制".decbin($c)."<br>";
	//按位取反：：数轴上，零算整数 取反 为-1 	
	//以此类推：-5取反为4    -14取反为13
  
	echo 13&7;
	echo "<br><br><br>";

	echo 5|4;
	echo "<br><br><br>";

	echo -3^3;
	echo "<br><br><br>";
}
//整数的原码、反码、补码都一样
//负数的补码：反码+1
//零的反码、补码都是零
//计算机运算时都是以 补码 的方式运算
?>
------------------------
13&7
13原码 00000000 00001101
7 原码 00000000 00000111
按位与 00000000 00000101 与：同为1才是1
结果  5
-------------------------
5|4
5 原码 00000000 00000101
4 原码 00000000 00000100
按位或 00000000 00000101  同或：有一个1就为1
结果 5
-------------------------
-3^3               -------技巧：可以各自取反，然后相加
-3原码 10000000 00000011
-3反码 11111111 11111100
-3补码 11111111 11111101
3 原码 00000000 00000011
位异或 11111111 11111110
补转反 11111111 11111101
反转原 10000000 00000010  符号不变！！！
结果 2 

--------------------------
移位运算： 
算术右移：低位溢出，符号位不变，高位用符号位补
算术左移：高位溢出，符号位不变，低位补0